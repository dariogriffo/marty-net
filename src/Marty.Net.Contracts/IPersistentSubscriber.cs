namespace Marty.Net.Contracts;

using Exceptions;
using System.Threading;
using System.Threading.Tasks;

/// <summary>
///     The interface to have access to Persistent Subscriptions
/// </summary>
public interface IPersistentSubscriber
{
    /// <summary>
    ///     Subscribes asynchronously to a stream.
    ///     While processing events it can throw <exception cref="UnknownEventAppeared"></exception>
    ///     when the event was generated by Marty but it cannot create the event during assembly discovery
    /// </summary>
    /// <param name="streamName">The name of the stream.</param>
    /// <param name="subscriptionPosition">The position to start the subscription from </param>
    /// <param name="cancellationToken">The CancellationToken.</param>
    /// <exception cref="SubscriptionFailed"></exception>
    public Task SubscribeToStream(
        string streamName,
        SubscriptionPosition subscriptionPosition = SubscriptionPosition.End,
        CancellationToken cancellationToken = default
    );

    /// <summary>
    ///     Subscribes asynchronously to the $all stream.
    ///     While processing events it can throw <exception cref="UnknownEventAppeared"></exception>
    ///     when the event was generated by Marty but it cannot create the event during assembly discovery
    /// </summary>
    /// <param name="cancellationToken">The CancellationToken.</param>
    /// <param name="subscriptionPosition">The position to start the subscription from </param>
    /// <exception cref="SubscriptionFailed"></exception>
    public Task SubscribeToAll(
        SubscriptionPosition subscriptionPosition = SubscriptionPosition.End,
        CancellationToken cancellationToken = default
    );
}
